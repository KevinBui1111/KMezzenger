@{
    ViewBag.Title = "Chat";
}

<div id="contact_list">
    <div class="contact_title">Contact list</div>
</div>

<div id="templateDiv" class="hidden" >
    <div class="contact"></div>

    <div class="rightFrame">
        <div class="time">(p0)</div>
	        <div class="roundDiv blue">
	            <span>(p1)</span>
	        </div><!--
            --><div class="Corner rightCorner"></div>
    </div>

    <div class="leftFrame">
	        <div class="Corner leftCorner"></div><!--
            --><div class="roundDiv pink">
	            <span>(p1)</span>
	        </div>
        <div class="time">(p0)</div>
    </div>
</div>

<div class="messDiv">
    <div class='buddy_name'></div>
    <div class="convDiv">

    </div>


    <div class='composeMessage'>
        <textarea id="message" rows='2'></textarea>
        <input type="button" id="sendmessage" value="Send" />
    </div>
</div>

@section CSS {
<link href="@Url.Content("~/Content/Message.css")" rel="stylesheet" type="text/css" />

<style type="text/css">
    #contact_list {
        float: left;
        /*border: 1px solid gray;*/
    }
    #contact_list div {
        /*border-top: 1px solid gray;*/
        background-color:#F0F0F0;
        margin:1px;
        padding: 5px;
    }
    #contact_list div:not(:first-child):hover {
        background-color:lightblue;
    }
    #contact_list .contact_title {
        border-top: none;
        background-color:firebrick;
        color:white;
    }
    #contact_list div.selected
    {
        background-color:lightblue;
    }
    div.online {
        color:Blue;
    }
    div.offline {
        color:Gray;
    }

    #message 
    {
        width: 500px;
    }
    .composeMessage textarea, .composeMessage input
    {
        vertical-align:middle;
    }
    .buddy_name 
    {
        font-size: 2em;
        border-bottom: 1px solid grey;
        margin-bottom: 15px;
        padding: 5px;
    }
</style>
}
@section JS {
    <!--Script references. -->
    <!--The jQuery library is required and is referenced by default in _Layout.cshtml. -->
    <!--Reference the SignalR library. -->
    <!--SignalR script to update the chat page and send messages.--> 
    <script type="text/javascript">
        var chat;
        var dicContact = {};
        $(document).ready(function () {

            $('#contact_list').on('click', '.contact', onSelectContact);
            // Reference the auto-generated proxy for the hub.  
            chat = $.connection.chatHub;
            // Create a function that the hub can call back to display messages.
            chat.client.on_receive_message = on_receive_message;
            // Create a function that the hub can call back to notify there is a new user connect.
            chat.client.on_buddy_connect = on_buddy_connect;
            // Create a function that the hub can call back to notify list of contact.
            chat.client.on_receive_contacts = on_receive_contacts;
            chat.client.on_result_send_message = on_result_send_message;

            // Get the user name and store it to prepend to messages.
            //$('#displayname').val(prompt('Enter your name:', ''));
            $('#message').focus();

            // Start the connection.
            $.connection.hub.qs = { 'username': $('#displayname').val() };
            $.connection.hub.start().done(onConnected);

            var tryingToReconnect = false;
            $.connection.hub.reconnecting(function () { tryingToReconnect = true; });
            $.connection.hub.reconnected(function () { tryingToReconnect = false; });
            $.connection.hub.disconnected(function () {
                setTimeout(function () { $.connection.hub.start(); }, 5000); // Restart connection after 5 seconds.
            });
        });
        function notifyUserOfTryingToReconnect() {
            console.log('trying to reconnect');
        }

        function on_result_send_message(message_id, result, error) {
            
        }
        function on_receive_contacts(message) {
            $('#contact_list .contact').remove();
            $.each(message, function (index, value) {
                on_buddy_connect(value);
            });
        }
        function onSelectContact() {
            $('#contact_list .contact').removeClass('selected');
            $(this).addClass('selected');
            $('.buddy_name').html($(this).html());
        }
        function on_buddy_connect(buddy) {
            // Add the message to the page.
            var contact;
            if (buddy.username in dicContact) {
                contact = dicContact[buddy.username];
            }
            else {
                contact = $('#templateDiv .contact').clone().appendTo('#contact_list');
                dicContact[buddy.username] = contact;
                contact.html(buddy.username);
            }
            contact.removeClass('offline online');
            contact.addClass(buddy.status == 0 ? 'offline' : 'online');
        }
        function on_receive_message(name, message) {
            // Add the message to the page. 
            var mess = $('#templateDiv .leftFrame')[0].outerHTML.format('14:35', htmlEncode(message));
            $('.convDiv').append(mess);
        }
        function onConnected() {
            $('#sendmessage').click(send_message);
        }
        function send_message() {
            var who = $('#contact_list .selected').html();
            var message = $('#message').val();
            // Call the Send method on the hub.
            chat.server.send_message(who, message, 1);
            // Clear text box and reset focus for next comment. 
            $('#message').val('').focus();

            var mess = $('#templateDiv .rightFrame')[0].outerHTML.format('14:36', message);
            $('.convDiv').append(mess);

        }
        // This optional function html-encodes messages for display in the page.
        function htmlEncode(value) {
            var encodedValue = $('<div />').text(value).html();
            return encodedValue;
        }
    </script>
}