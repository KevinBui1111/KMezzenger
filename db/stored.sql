create or replace PROCEDURE CREATE_USER 
(
  P_USERNAME IN VARCHAR2
, P_PASS IN VARCHAR2
, P_SALT IN VARCHAR2
) IS
BEGIN
  INSERT INTO USER_AUTHEN (USER_ID, USERNAME, HASH_PASS, HASH_SALT, STATUS, LOGIN_TYPE, DATE_CREATED)
  VALUES (SEQ_USER_ID.NEXTVAL, LOWER(P_USERNAME), P_PASS, P_SALT, 1, 0, SYSDATE);
END;
/
create or replace PROCEDURE SET_PASSWORD 
(
  P_USERNAME IN VARCHAR2
, P_PASS IN VARCHAR2
, P_SALT IN VARCHAR2
) IS
BEGIN
  UPDATE USER_AUTHEN
  SET HASH_PASS = P_PASS
    , HASH_SALT = P_SALT
  WHERE USERNAME = LOWER(P_USERNAME);
END;
/
create or replace FUNCTION GET_USER
(
  P_USERNAME IN VARCHAR2
) RETURN SYS_REFCURSOR IS
  RESULT SYS_REFCURSOR;
BEGIN
  OPEN RESULT FOR
  SELECT USERNAME, HASH_PASS, HASH_SALT, LOGIN_TYPE
  FROM USER_AUTHEN
  WHERE USERNAME = LOWER(P_USERNAME)
    AND STATUS = 1
  ;
  
  RETURN RESULT;  
END;
/
create or replace FUNCTION GET_BUDDIES 
(
  P_USERNAME IN VARCHAR2
) RETURN SYS_REFCURSOR IS
  RESULT SYS_REFCURSOR;
BEGIN
  OPEN RESULT FOR
  SELECT BU.USERNAME
  FROM BUDDY B
    JOIN USER_AUTHEN ME ON ME.USER_ID = B.USER_ID
    JOIN USER_AUTHEN BU ON BU.USER_ID = B.BUDDY_ID
  WHERE ME.USERNAME = LOWER(P_USERNAME)
    AND BU.STATUS = 1
  ;
  
  RETURN RESULT;
END;
/
create or replace PROCEDURE SAVE_MESSAGE
(
  P_MESS_BODY VARCHAR2
, P_FROM_USERNAME VARCHAR2
, P_TO_USERNAME VARCHAR2
, P_DATE_SENT DATE
, O_MESSAGE_ID OUT NUMBER
) IS
  FROM_ID NUMBER;
  TO_ID NUMBER;
  CONV_ID NUMBER;
BEGIN
  SELECT USER_ID INTO FROM_ID FROM USER_AUTHEN WHERE USERNAME = LOWER(P_FROM_USERNAME);
  SELECT USER_ID INTO TO_ID   FROM USER_AUTHEN WHERE USERNAME = LOWER(P_TO_USERNAME);
  
  -- Find conversation of this couple
  BEGIN 
    SELECT CONVERSATION_ID INTO CONV_ID
    FROM (
      SELECT UC.CONVERSATION_ID
        ,SUM (
          CASE
            WHEN UC.USER_ID IN (FROM_ID,TO_ID) THEN 1
            ELSE 3
          END
        ) MATCH_USER
      FROM USER_CONV UC
      GROUP BY UC.CONVERSATION_ID
    ) UC
    WHERE MATCH_USER = 2
    ;
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      -- Create new conversation
      INSERT INTO CONVERSATION (CONVERSATION_ID, STATUS, DATE_CREATED)
      VALUES (SEQ_CONV_ID.NEXTVAL, 1, SYSDATE)
      RETURNING CONVERSATION_ID INTO CONV_ID;
      
      -- Add couple to conversation
      INSERT INTO USER_CONV(CONVERSATION_ID, USER_ID, STATUS, DATE_CREATED)
            SELECT CONV_ID, FROM_ID, 1, SYSDATE FROM DUAL
      UNION SELECT CONV_ID, TO_ID,   1, SYSDATE FROM DUAL;
  END;
  
  -- store message
  INSERT INTO MESSAGE (MESSAGE_ID, MESS_BODY, STATUS, FROM_USER_ID, CONVERSATION_ID, DATE_SENT)
  VALUES (SEQ_MESS_ID.NEXTVAL, P_MESS_BODY, 1, FROM_ID, CONV_ID, P_DATE_SENT)
  RETURNING MESSAGE_ID INTO O_MESSAGE_ID;
  
END;
/
create or replace PROCEDURE UPDATE_MESSAGE_DELIVERY
(
  I_MESSAGE_ID NUMBER
) IS
BEGIN
  UPDATE MESSAGE
  SET STATUS = 2
    ,DATE_DELIVERED = SYSDATE
  WHERE MESSAGE_ID = I_MESSAGE_ID;
END;
/

create or replace PROCEDURE REQUEST_ADD_BUDDY 
(
  P_REQUEST_NAME IN VARCHAR2
, P_BUDDY_NAME IN VARCHAR2
) IS
BEGIN
  INSERT INTO BUDDY (USER_ID, BUDDY_ID, STATUS, DATE_CREATED)
  SELECT U1.USER_ID, U2.USER_ID, 0, SYSDATE
  FROM DUAL D
    JOIN USER_AUTHEN U1 ON U1.USERNAME = P_REQUEST_NAME
    JOIN USER_AUTHEN U2 ON U2.USERNAME = P_BUDDY_NAME
  ;
END;
/
create or replace PROCEDURE ACCEPT_ADD_BUDDY 
(
  P_REQUEST_NAME IN VARCHAR2
, P_BUDDY_NAME IN VARCHAR2
) IS
  P_REQUEST_ID NUMBER;
  P_BUDDY_ID NUMBER;
BEGIN
  SELECT USER_ID INTO P_REQUEST_ID FROM USER_AUTHEN WHERE USERNAME = LOWER(P_REQUEST_NAME);
  SELECT USER_ID INTO P_BUDDY_ID   FROM USER_AUTHEN WHERE USERNAME = LOWER(P_BUDDY_NAME);
  
  UPDATE BUDDY B
  SET STATUS = 1
  WHERE B.USER_ID = P_REQUEST_ID AND B.BUDDY_ID = P_BUDDY_ID;
  
  MERGE INTO BUDDY D
  USING DUAL S
  ON (D.USER_ID = P_BUDDY_ID AND D.BUDDY_ID = P_REQUEST_ID)
  WHEN MATCHED THEN UPDATE
    SET D.STATUS = 1
  WHEN NOT MATCHED THEN
    INSERT (USER_ID, BUDDY_ID, STATUS, DATE_CREATED)
    VALUES (P_BUDDY_ID,P_REQUEST_ID, 1, SYSDATE);

END;
/

create or replace PROCEDURE FORCE_ADD_BUDDY 
(
  P_REQUEST_NAME IN VARCHAR2
, P_BUDDY_NAME IN VARCHAR2
) IS
  P_REQUEST_ID NUMBER;
  P_BUDDY_ID NUMBER;
BEGIN
  SELECT USER_ID INTO P_REQUEST_ID FROM USER_AUTHEN WHERE USERNAME = LOWER(P_REQUEST_NAME);
  SELECT USER_ID INTO P_BUDDY_ID   FROM USER_AUTHEN WHERE USERNAME = LOWER(P_BUDDY_NAME);
  
  MERGE INTO BUDDY D
  USING DUAL S
  ON (D.USER_ID = P_REQUEST_ID AND D.BUDDY_ID = P_BUDDY_ID)
  WHEN MATCHED THEN UPDATE
    SET D.STATUS = 1
  WHEN NOT MATCHED THEN
    INSERT (USER_ID, BUDDY_ID, STATUS, DATE_CREATED)
    VALUES (P_REQUEST_ID, P_BUDDY_ID, 1, SYSDATE)
  ;
  
  MERGE INTO BUDDY D
  USING DUAL S
  ON (D.USER_ID = P_BUDDY_ID AND D.BUDDY_ID = P_REQUEST_ID)
  WHEN MATCHED THEN UPDATE
    SET D.STATUS = 1
  WHEN NOT MATCHED THEN
    INSERT (USER_ID, BUDDY_ID, STATUS, DATE_CREATED)
    VALUES (P_BUDDY_ID,P_REQUEST_ID, 1, SYSDATE)
  ;

END;
/